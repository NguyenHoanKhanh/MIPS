$date
	Mon Oct 13 01:44:23 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! p_o_pc [31:0] $end
$var wire 32 " p_wb_data [31:0] $end
$var reg 1 # p_clk $end
$var reg 1 $ p_i_ce $end
$var reg 1 % p_rst $end
$scope module p $end
$var wire 1 & c_d_o_ALUSrc $end
$var wire 1 ' c_d_o_Branch $end
$var wire 1 ( c_d_o_MemRead $end
$var wire 1 ) c_d_o_MemWrite $end
$var wire 1 * c_d_o_MemtoReg $end
$var wire 1 + c_d_o_RegDst $end
$var wire 1 , c_d_o_RegWrite $end
$var wire 6 - d_c_o_opcode [5:0] $end
$var wire 1 . p_clk $end
$var wire 1 / p_i_ce $end
$var wire 32 0 p_o_pc [31:0] $end
$var wire 1 1 p_rst $end
$var wire 32 2 p_wb_data [31:0] $end
$scope module d $end
$var wire 1 . d_clk $end
$var wire 1 & d_i_ALUSrc $end
$var wire 1 ' d_i_Branch $end
$var wire 1 ( d_i_MemRead $end
$var wire 1 ) d_i_MemWrite $end
$var wire 1 * d_i_MemtoReg $end
$var wire 1 + d_i_RegDst $end
$var wire 1 , d_i_RegWrite $end
$var wire 1 / d_i_ce $end
$var wire 1 1 d_rst $end
$var wire 1 3 ds_es_o_ce $end
$var wire 32 4 ds_es_o_data_rs [31:0] $end
$var wire 32 5 ds_es_o_data_rt [31:0] $end
$var wire 6 6 ds_es_o_funct [5:0] $end
$var wire 16 7 ds_es_o_imm [15:0] $end
$var wire 6 8 ds_es_o_opcode [5:0] $end
$var wire 1 9 es_is_change_pc $end
$var wire 32 : es_is_o_pc [31:0] $end
$var wire 32 ; es_load_data [31:0] $end
$var wire 32 < es_ms_alu_value [31:0] $end
$var wire 1 = es_ms_o_ce $end
$var wire 6 > es_o_funct [5:0] $end
$var wire 6 ? es_o_opcode [5:0] $end
$var wire 1 @ es_o_zero $end
$var wire 1 A fs_ds_o_ce $end
$var wire 32 B fs_ds_o_instr [31:0] $end
$var wire 1 C pc_im_o_ce $end
$var wire 32 D pc_im_o_pc [31:0] $end
$var wire 32 E write_back_data [31:0] $end
$scope module pc $end
$var wire 1 . pc_clk $end
$var wire 1 / pc_i_ce $end
$var wire 1 9 pc_i_change_pc $end
$var wire 32 F pc_i_pc [31:0] $end
$var wire 1 1 pc_rst $end
$var reg 1 G pc_o_ce $end
$var reg 32 H pc_o_pc [31:0] $end
$var reg 32 I temp_pc [31:0] $end
$upscope $end
$scope module i_m $end
$var wire 1 . im_clk $end
$var wire 32 J im_i_address [31:0] $end
$var wire 1 C im_i_ce $end
$var wire 1 1 im_rst $end
$var reg 1 K im_o_ce $end
$var reg 32 L im_o_instr [31:0] $end
$upscope $end
$scope module ds $end
$var wire 5 M d_o_addr_rs [4:0] $end
$var wire 5 N d_o_addr_rt [4:0] $end
$var wire 1 . ds_clk $end
$var wire 5 O ds_i_addr_rd [4:0] $end
$var wire 1 A ds_i_ce $end
$var wire 32 P ds_i_data_rd [31:0] $end
$var wire 32 Q ds_i_instr [31:0] $end
$var wire 1 + ds_i_reg_dst $end
$var wire 1 , ds_i_reg_wr $end
$var wire 1 3 ds_o_ce $end
$var wire 32 R ds_o_data_rs [31:0] $end
$var wire 32 S ds_o_data_rt [31:0] $end
$var wire 6 T ds_o_funct [5:0] $end
$var wire 16 U ds_o_imm [15:0] $end
$var wire 6 V ds_o_opcode [5:0] $end
$var wire 1 1 ds_rst $end
$var wire 5 W write_register [4:0] $end
$scope module d $end
$var wire 1 A d_i_ce $end
$var wire 6 X d_i_funct [5:0] $end
$var wire 32 Y d_i_instr [31:0] $end
$var wire 6 Z d_i_opcode [5:0] $end
$var wire 6 [ funct [5:0] $end
$var wire 1 \ funct_add $end
$var wire 1 ] funct_and $end
$var wire 1 ^ funct_or $end
$var wire 1 _ funct_sub $end
$var wire 1 ` funct_xor $end
$var wire 16 a imm [15:0] $end
$var wire 1 b op_addi $end
$var wire 1 c op_addiu $end
$var wire 1 d op_andi $end
$var wire 1 e op_beq $end
$var wire 1 f op_bne $end
$var wire 1 g op_load $end
$var wire 1 h op_ori $end
$var wire 1 i op_rtype $end
$var wire 1 j op_slti $end
$var wire 1 k op_sltiu $end
$var wire 1 l op_store $end
$var wire 1 m op_xori $end
$var wire 6 n opcode [5:0] $end
$var wire 5 o rd [4:0] $end
$var wire 5 p rs [4:0] $end
$var wire 5 q rt [4:0] $end
$var reg 5 r d_o_addr_rd [4:0] $end
$var reg 5 s d_o_addr_rs [4:0] $end
$var reg 5 t d_o_addr_rt [4:0] $end
$var reg 1 u d_o_ce $end
$var reg 6 v d_o_funct [5:0] $end
$var reg 16 w d_o_imm [15:0] $end
$var reg 6 x d_o_opcode [5:0] $end
$upscope $end
$scope module r $end
$var wire 5 y r_addr_in [4:0] $end
$var wire 5 z r_addr_out1 [4:0] $end
$var wire 5 { r_addr_out2 [4:0] $end
$var wire 1 . r_clk $end
$var wire 32 | r_data_in [31:0] $end
$var wire 32 } r_data_out1 [31:0] $end
$var wire 32 ~ r_data_out2 [31:0] $end
$var wire 1 1 r_rst $end
$var wire 1 , r_wr_en $end
$var integer 32 !" i [31:0] $end
$upscope $end
$upscope $end
$scope module es $end
$var wire 5 "" alu_control [4:0] $end
$var wire 32 #" alu_pc [31:0] $end
$var wire 32 $" alu_value [31:0] $end
$var wire 1 %" change_pc $end
$var wire 6 &" es_i_alu_funct [5:0] $end
$var wire 6 '" es_i_alu_op [5:0] $end
$var wire 1 & es_i_alu_src $end
$var wire 1 ' es_i_branch $end
$var wire 1 3 es_i_ce $end
$var wire 32 (" es_i_data_rs [31:0] $end
$var wire 32 )" es_i_data_rt [31:0] $end
$var wire 16 *" es_i_imm [15:0] $end
$var wire 32 +" es_i_pc [31:0] $end
$var wire 32 ," es_o_alu_pc [31:0] $end
$var wire 1 9 es_o_change_pc $end
$var wire 1 -" take_beq $end
$var wire 1 ." take_bne $end
$var wire 1 /" take_branch $end
$var wire 1 0" temp_zero $end
$var reg 32 1" es_o_alu_value [31:0] $end
$var reg 1 2" es_o_ce $end
$var reg 6 3" es_o_funct [5:0] $end
$var reg 6 4" es_o_opcode [5:0] $end
$var reg 1 5" es_o_zero $end
$scope module ac $end
$var wire 6 6" ac_i_funct [5:0] $end
$var wire 6 7" ac_i_opcode [5:0] $end
$var reg 5 8" ac_o_control [4:0] $end
$upscope $end
$scope module a $end
$var wire 1 & a_i_alu_src $end
$var wire 32 9" a_i_data_rs [31:0] $end
$var wire 32 :" a_i_data_rt [31:0] $end
$var wire 5 ;" a_i_funct [4:0] $end
$var wire 16 <" a_i_imm [15:0] $end
$var wire 32 =" a_i_pc [31:0] $end
$var wire 32 >" a_imm [31:0] $end
$var wire 32 ?" a_o_data_2 [31:0] $end
$var wire 1 @" funct_add $end
$var wire 1 A" funct_addu $end
$var wire 1 B" funct_and $end
$var wire 1 C" funct_beq $end
$var wire 1 D" funct_bne $end
$var wire 1 E" funct_eq $end
$var wire 1 F" funct_ge $end
$var wire 1 G" funct_geu $end
$var wire 1 H" funct_neq $end
$var wire 1 I" funct_or $end
$var wire 1 J" funct_sll $end
$var wire 1 K" funct_slt $end
$var wire 1 L" funct_sltu $end
$var wire 1 M" funct_sra $end
$var wire 1 N" funct_srl $end
$var wire 1 O" funct_sub $end
$var wire 1 P" funct_xor $end
$var reg 1 Q" a_o_change_pc $end
$var reg 32 R" alu_pc [31:0] $end
$var reg 32 S" alu_value [31:0] $end
$upscope $end
$upscope $end
$scope module m $end
$var wire 32 T" alu_value_addr [31:0] $end
$var wire 1 . m_clk $end
$var wire 1 = m_i_ce $end
$var wire 32 U" m_i_store_data [31:0] $end
$var wire 32 V" m_o_load_data [31:0] $end
$var wire 1 ( m_rd_en $end
$var wire 1 1 m_rst $end
$var wire 1 ) m_wr_en $end
$var integer 32 W" i [31:0] $end
$upscope $end
$upscope $end
$scope module c $end
$var wire 6 X" d_c_opcode [5:0] $end
$var reg 1 Y" ALUSrc $end
$var reg 1 Z" Branch $end
$var reg 1 [" MemRead $end
$var reg 1 \" MemWrite $end
$var reg 1 ]" MemtoReg $end
$var reg 1 ^" RegDst $end
$var reg 1 _" RegWrite $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 `" counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 `"
1_"
1^"
0]"
0\"
0["
0Z"
0Y"
b0 X"
b100000 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
1@"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
05"
b0 4"
b0 3"
02"
b0 1"
10"
0/"
0."
0-"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
0%"
b0 $"
b0 #"
b0 ""
b100000 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
0u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
0m
0l
0k
0j
1i
0h
0g
0f
0e
0d
0c
0b
b0 a
0`
0_
0^
0]
0\
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
0K
b0 J
b0 I
b0 H
0G
b0 F
b0 E
b0 D
0C
b0 B
0A
0@
b0 ?
b0 >
0=
b0 <
b0 ;
b0 :
09
b0 8
b0 7
b0 6
b0 5
b0 4
03
b0 2
01
b0 0
x/
0.
b0 -
1,
1+
0*
0)
0(
0'
0&
0%
x$
0#
b0 "
b0 !
$end
#5
1#
1.
#10
b100000 W"
b100000 !"
0#
0.
#15
1#
1.
#20
1%
11
0#
0.
#25
b100 I
1G
1C
1$
1/
1#
1.
#30
0#
0.
#35
b1000 W
b1000 y
b11011 "
b11011 2
b11011 E
b11011 P
b11011 |
00"
1\"
1)
1Y"
1&
0_"
0,
0^"
0+
12"
1=
05"
0@
b10 4"
b10 ?
b11011 1"
b11011 ;
b11011 V"
b11011 <
b11011 T"
b10100 ?"
b11011 S"
b11011 $"
1u
13
b10100 w
b10100 >"
b10100 7
b10100 U
b10100 *"
b10100 <"
b10 x
b10 -
b10 8
b10 V
b10 '"
b10 7"
b10 X"
b1000 t
b1000 5
b1000 S
b1000 ~
b1000 )"
b1000 :"
b1000 U"
b1000 N
b1000 {
b111 s
b111 4
b111 R
b111 }
b111 ("
b111 9"
b111 M
b111 z
0i
1l
b10 Z
b10100 X
b111 p
b1000 q
b10 n
b10100 [
b10100 a
b1000 I
b100 H
b100 !
b100 0
b100 D
b100 J
b100 +"
b100 ="
1K
1A
b1000111010000000000000010100 L
b1000111010000000000000010100 B
b1000111010000000000000010100 Q
b1000111010000000000000010100 Y
1#
1.
#40
b1000 ;
b1000 V"
0#
0.
#45
b1000 "
b1000 2
b1000 E
b1000 P
b1000 |
1_"
1,
1]"
1*
1["
1(
1Y"
1&
0\"
0)
b110 W
b110 y
1u
13
b10100 w
b10100 >"
b10100 7
b10100 U
b10100 *"
b10100 <"
b1 x
b1 -
b1 8
b1 V
b1 '"
b1 7"
b1 X"
b110 t
b110 5
b110 S
b110 ~
b110 )"
b110 :"
b110 U"
b110 N
b110 {
b111 s
b111 4
b111 R
b111 }
b111 ("
b111 9"
b111 M
b111 z
12"
1=
b1 4"
b1 ?
b11011 1"
b1000 ;
b1000 V"
b11011 <
b11011 T"
1g
0l
b1 Z
b110 q
b1 n
b11011 S"
b11011 $"
b100111001100000000000010100 L
b100111001100000000000010100 B
b100111001100000000000010100 Q
b100111001100000000000010100 Y
b1100 I
b1000 H
b1000 !
b1000 0
b1000 D
b1000 J
b1000 +"
b1000 ="
1#
1.
#50
12"
1=
b1 4"
b1 ?
b11011 1"
b1000 ;
b1000 V"
b11011 <
b11011 T"
b11011 S"
b11011 $"
b1000 5
b1000 S
b1000 ~
b1000 )"
b1000 :"
b1000 U"
0#
0.
#55
10"
b0 "
b0 2
b0 E
b0 P
b0 |
b0 ?"
1^"
1+
1_"
1,
0Y"
0&
0]"
0*
0["
0(
b0 W
b0 y
02"
0=
b0 4"
b0 ?
b0 1"
b0 ;
b0 V"
b0 <
b0 T"
0u
03
b0 w
b0 >"
b0 7
b0 U
b0 *"
b0 <"
b0 x
b0 -
b0 8
b0 V
b0 '"
b0 7"
b0 X"
b0 t
b0 5
b0 S
b0 ~
b0 )"
b0 :"
b0 U"
b0 N
b0 {
b0 s
b0 4
b0 R
b0 }
b0 ("
b0 9"
b0 M
b0 z
b0 S"
b0 $"
xi
xg
xl
xe
xf
xb
xc
xj
xk
xd
xh
xm
bx Z
x\
x_
x]
x^
x`
bx X
bx p
bx q
bx o
bx n
bx [
bx a
b10000 I
b1100 H
b1100 !
b1100 0
b1100 D
b1100 J
b1100 +"
b1100 ="
bx L
bx B
bx Q
bx Y
1#
1.
#60
0#
0.
#65
b10100 I
b10000 H
b10000 !
b10000 0
b10000 D
b10000 J
b10000 +"
b10000 ="
1#
1.
#70
0#
0.
#75
b11000 I
b10100 H
b10100 !
b10100 0
b10100 D
b10100 J
b10100 +"
b10100 ="
1#
1.
#80
0#
0.
#85
b11100 I
b11000 H
b11000 !
b11000 0
b11000 D
b11000 J
b11000 +"
b11000 ="
1#
1.
#90
0#
0.
#95
b100000 I
b11100 H
b11100 !
b11100 0
b11100 D
b11100 J
b11100 +"
b11100 ="
1#
1.
#100
0#
0.
#105
b100100 I
b100000 H
b100000 !
b100000 0
b100000 D
b100000 J
b100000 +"
b100000 ="
1#
1.
#110
0#
0.
#115
b101000 I
b100100 H
b100100 !
b100100 0
b100100 D
b100100 J
b100100 +"
b100100 ="
1#
1.
#120
0#
0.
#125
b101100 I
b101000 H
b101000 !
b101000 0
b101000 D
b101000 J
b101000 +"
b101000 ="
1#
1.
#130
0#
0.
#135
b110000 I
b101100 H
b101100 !
b101100 0
b101100 D
b101100 J
b101100 +"
b101100 ="
1#
1.
#140
0#
0.
#145
b110100 I
b110000 H
b110000 !
b110000 0
b110000 D
b110000 J
b110000 +"
b110000 ="
1#
1.
#150
0#
0.
#155
b111000 I
b110100 H
b110100 !
b110100 0
b110100 D
b110100 J
b110100 +"
b110100 ="
1#
1.
#160
0#
0.
#165
b111100 I
b111000 H
b111000 !
b111000 0
b111000 D
b111000 J
b111000 +"
b111000 ="
1#
1.
#170
0#
0.
#175
b1000000 I
b111100 H
b111100 !
b111100 0
b111100 D
b111100 J
b111100 +"
b111100 ="
1#
1.
#180
0#
0.
#185
b1000100 I
b1000000 H
b1000000 !
b1000000 0
b1000000 D
b1000000 J
b1000000 +"
b1000000 ="
1#
1.
#190
0#
0.
#195
b1001000 I
b1000100 H
b1000100 !
b1000100 0
b1000100 D
b1000100 J
b1000100 +"
b1000100 ="
1#
1.
