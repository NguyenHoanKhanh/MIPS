$date
	Sun Oct 05 22:50:25 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! p_o_pc [31:0] $end
$var wire 32 " p_wb_data [31:0] $end
$var reg 1 # p_clk $end
$var reg 1 $ p_i_ce $end
$var reg 1 % p_rst $end
$scope module p $end
$var wire 1 & c_d_o_ALUSrc $end
$var wire 1 ' c_d_o_Branch $end
$var wire 1 ( c_d_o_MemRead $end
$var wire 1 ) c_d_o_MemWrite $end
$var wire 1 * c_d_o_MemtoReg $end
$var wire 1 + c_d_o_RegDst $end
$var wire 1 , c_d_o_RegWrite $end
$var wire 6 - d_c_o_opcode [5:0] $end
$var wire 1 . p_clk $end
$var wire 1 / p_i_ce $end
$var wire 32 0 p_o_pc [31:0] $end
$var wire 1 1 p_rst $end
$var wire 32 2 p_wb_data [31:0] $end
$scope module d $end
$var wire 1 . d_clk $end
$var wire 1 & d_i_ALUSrc $end
$var wire 1 ' d_i_Branch $end
$var wire 1 ( d_i_MemRead $end
$var wire 1 ) d_i_MemWrite $end
$var wire 1 * d_i_MemtoReg $end
$var wire 1 + d_i_RegDst $end
$var wire 1 , d_i_RegWrite $end
$var wire 1 / d_i_ce $end
$var wire 1 1 d_rst $end
$var wire 1 3 ds_es_o_ce $end
$var wire 32 4 ds_es_o_data_rs [31:0] $end
$var wire 32 5 ds_es_o_data_rt [31:0] $end
$var wire 6 6 ds_es_o_funct [5:0] $end
$var wire 16 7 ds_es_o_imm [15:0] $end
$var wire 6 8 ds_es_o_opcode [5:0] $end
$var wire 1 9 es_is_change_pc $end
$var wire 32 : es_is_o_pc [31:0] $end
$var wire 32 ; es_load_data [31:0] $end
$var wire 32 < es_ms_alu_value [31:0] $end
$var wire 1 = es_ms_o_ce $end
$var wire 6 > es_o_funct [5:0] $end
$var wire 6 ? es_o_opcode [5:0] $end
$var wire 1 @ es_o_zero $end
$var wire 1 A fs_ds_o_ce $end
$var wire 32 B fs_ds_o_instr [31:0] $end
$var wire 32 C fs_es_o_pc [31:0] $end
$var wire 32 D write_back_data [31:0] $end
$scope module is $end
$var wire 1 . f_clk $end
$var wire 1 E f_i_ack $end
$var wire 1 / f_i_ce $end
$var wire 1 9 f_i_change_pc $end
$var wire 32 F f_i_instr [31:0] $end
$var wire 1 G f_i_last $end
$var wire 32 H f_i_pc [31:0] $end
$var wire 1 1 f_rst $end
$var reg 1 I f_o_ce $end
$var reg 32 J f_o_instr [31:0] $end
$var reg 32 K f_o_pc [31:0] $end
$var reg 1 L f_o_syn $end
$scope module t $end
$var wire 1 . t_clk $end
$var wire 1 M t_i_syn $end
$var wire 1 1 t_rst $end
$var integer 32 N counter [31:0] $end
$var reg 1 O t_o_ack $end
$var reg 32 P t_o_instr [31:0] $end
$var reg 1 Q t_o_last $end
$upscope $end
$upscope $end
$scope module ds $end
$var wire 5 R d_o_addr_rs [4:0] $end
$var wire 5 S d_o_addr_rt [4:0] $end
$var wire 1 . ds_clk $end
$var wire 5 T ds_i_addr_rd [4:0] $end
$var wire 1 A ds_i_ce $end
$var wire 32 U ds_i_data_rd [31:0] $end
$var wire 32 V ds_i_instr [31:0] $end
$var wire 1 + ds_i_reg_dst $end
$var wire 1 , ds_i_reg_wr $end
$var wire 1 3 ds_o_ce $end
$var wire 32 W ds_o_data_rs [31:0] $end
$var wire 32 X ds_o_data_rt [31:0] $end
$var wire 6 Y ds_o_funct [5:0] $end
$var wire 16 Z ds_o_imm [15:0] $end
$var wire 6 [ ds_o_opcode [5:0] $end
$var wire 1 1 ds_rst $end
$var wire 5 \ write_register [4:0] $end
$scope module d $end
$var wire 1 . d_clk $end
$var wire 1 A d_i_ce $end
$var wire 6 ] d_i_funct [5:0] $end
$var wire 32 ^ d_i_instr [31:0] $end
$var wire 6 _ d_i_opcode [5:0] $end
$var wire 1 1 d_rst $end
$var wire 1 ` funct_add $end
$var wire 1 a funct_and $end
$var wire 1 b funct_or $end
$var wire 1 c funct_sub $end
$var wire 1 d funct_xor $end
$var wire 1 e op_addi $end
$var wire 1 f op_addiu $end
$var wire 1 g op_andi $end
$var wire 1 h op_branch $end
$var wire 1 i op_load $end
$var wire 1 j op_ori $end
$var wire 1 k op_rtype $end
$var wire 1 l op_slti $end
$var wire 1 m op_sltiu $end
$var wire 1 n op_store $end
$var wire 1 o op_xori $end
$var reg 5 p d_o_addr_rd [4:0] $end
$var reg 5 q d_o_addr_rs [4:0] $end
$var reg 5 r d_o_addr_rt [4:0] $end
$var reg 1 s d_o_ce $end
$var reg 6 t d_o_funct [5:0] $end
$var reg 16 u d_o_imm [15:0] $end
$var reg 6 v d_o_opcode [5:0] $end
$var reg 32 w temp_instr [31:0] $end
$upscope $end
$scope module r $end
$var wire 5 x r_addr_in [4:0] $end
$var wire 5 y r_addr_out1 [4:0] $end
$var wire 5 z r_addr_out2 [4:0] $end
$var wire 1 . r_clk $end
$var wire 32 { r_data_in [31:0] $end
$var wire 32 | r_data_out1 [31:0] $end
$var wire 32 } r_data_out2 [31:0] $end
$var wire 1 1 r_rst $end
$var wire 1 , r_wr_en $end
$var integer 32 ~ i [31:0] $end
$upscope $end
$upscope $end
$scope module es $end
$var wire 32 !" alu_pc [31:0] $end
$var wire 32 "" alu_value [31:0] $end
$var wire 1 #" done $end
$var wire 1 . es_clk $end
$var wire 6 $" es_i_alu_funct [5:0] $end
$var wire 6 %" es_i_alu_op [5:0] $end
$var wire 1 & es_i_alu_src $end
$var wire 1 ' es_i_branch $end
$var wire 1 3 es_i_ce $end
$var wire 32 &" es_i_data_rs [31:0] $end
$var wire 32 '" es_i_data_rt [31:0] $end
$var wire 16 (" es_i_imm [15:0] $end
$var wire 32 )" es_i_pc [31:0] $end
$var wire 1 1 es_rst $end
$var wire 1 *" temp_zero $end
$var reg 5 +" alu_control [4:0] $end
$var reg 32 ," es_o_alu_pc [31:0] $end
$var reg 32 -" es_o_alu_value [31:0] $end
$var reg 1 ." es_o_ce $end
$var reg 1 /" es_o_change_pc $end
$var reg 6 0" es_o_funct [5:0] $end
$var reg 6 1" es_o_opcode [5:0] $end
$var reg 1 2" es_o_zero $end
$scope module a $end
$var wire 1 & a_i_alu_src $end
$var wire 32 3" a_i_data_rs [31:0] $end
$var wire 32 4" a_i_data_rt [31:0] $end
$var wire 5 5" a_i_funct [4:0] $end
$var wire 16 6" a_i_imm [15:0] $end
$var wire 32 7" a_i_pc [31:0] $end
$var wire 32 8" a_imm [31:0] $end
$var wire 32 9" a_o_data_2 [31:0] $end
$var wire 1 :" funct_add $end
$var wire 1 ;" funct_addu $end
$var wire 1 <" funct_and $end
$var wire 1 =" funct_beq $end
$var wire 1 >" funct_bne $end
$var wire 1 ?" funct_eq $end
$var wire 1 @" funct_ge $end
$var wire 1 A" funct_geu $end
$var wire 1 B" funct_neq $end
$var wire 1 C" funct_or $end
$var wire 1 D" funct_sll $end
$var wire 1 E" funct_slt $end
$var wire 1 F" funct_sltu $end
$var wire 1 G" funct_sra $end
$var wire 1 H" funct_srl $end
$var wire 1 I" funct_sub $end
$var wire 1 J" funct_xor $end
$var reg 32 K" alu_pc [31:0] $end
$var reg 32 L" alu_value [31:0] $end
$var reg 1 M" done $end
$upscope $end
$upscope $end
$scope module m $end
$var wire 32 N" alu_value_addr [31:0] $end
$var wire 1 . m_clk $end
$var wire 1 = m_i_ce $end
$var wire 32 O" m_i_store_data [31:0] $end
$var wire 1 ( m_rd_en $end
$var wire 1 1 m_rst $end
$var wire 1 ) m_wr_en $end
$var integer 32 P" i [31:0] $end
$var reg 32 Q" m_o_load_data [31:0] $end
$upscope $end
$upscope $end
$scope module c $end
$var wire 6 R" d_c_opcode [5:0] $end
$var reg 1 S" ALUSrc $end
$var reg 1 T" Branch $end
$var reg 1 U" MemRead $end
$var reg 1 V" MemWrite $end
$var reg 1 W" MemtoReg $end
$var reg 1 X" RegDst $end
$var reg 1 Y" RegWrite $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 Z" counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 Z"
1Y"
1X"
0W"
0V"
0U"
0T"
0S"
b0 R"
b0 Q"
b100000 P"
b0 O"
b0 N"
1M"
b0 L"
b0 K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
1:"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
02"
b0 1"
b0 0"
0/"
0."
b0 -"
b0 ,"
b0 +"
1*"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
1#"
b0 ""
b0 !"
b100000 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
bx w
b0 v
b0 u
b0 t
0s
b0 r
b0 q
b0 p
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
bx _
b0 ^
bx ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
0Q
b0 P
0O
b0 N
0M
0L
b0 K
b0 J
0I
b0 H
0G
b0 F
0E
b0 D
b0 C
b0 B
0A
0@
b0 ?
b0 >
0=
b0 <
b0 ;
b0 :
09
b0 8
b0 7
b0 6
b0 5
b0 4
03
b0 2
01
b0 0
x/
0.
b0 -
1,
1+
0*
0)
0(
0'
0&
0%
x$
0#
b0 "
b0 !
$end
#5
b100000 P"
b100000 ~
1#
1.
#10
0#
0.
#15
1%
11
1#
1.
#20
0#
0.
#25
1L
1M
1$
1/
1#
1.
#30
0#
0.
#35
1O
1E
b1 N
b10000110000100000100000 P
b10000110000100000100000 F
1#
1.
#40
0#
0.
#45
1M"
1#"
1I
1A
b100 K
b100 C
b100 )"
b100 7"
b10000110000100000100000 J
b10000110000100000100000 B
b10000110000100000100000 V
b10000110000100000100000 ^
b10 N
b101001100010000000100001 P
b101001100010000000100001 F
1#
1.
#50
0#
0.
#55
1M"
1#"
1k
0i
0n
0h
0e
0f
0l
0m
0g
0j
0o
b0 _
1`
0c
0a
0b
0d
b100000 ]
b11 N
b1000010010011100000100010 P
b1000010010011100000100010 F
b1000 K
b1000 C
b1000 )"
b1000 7"
b101001100010000000100001 J
b101001100010000000100001 B
b101001100010000000100001 V
b101001100010000000100001 ^
b10000110000100000100000 w
1#
1.
#60
0#
0.
#65
0*"
b1 \
b1 x
b11 9"
0`
1c
b100001 ]
b101 L"
b101 ""
1M"
1#"
1s
13
b100000 t
b100000 6
b100000 Y
b100000 $"
b1 p
b1 T
b11 r
b11 5
b11 X
b11 }
b11 '"
b11 4"
b11 O"
b11 S
b11 z
b10 q
b10 4
b10 W
b10 |
b10 &"
b10 3"
b10 R
b10 y
b101001100010000000100001 w
b1100 K
b1100 C
b1100 )"
b1100 7"
b1000010010011100000100010 J
b1000010010011100000100010 B
b1000010010011100000100010 V
b1000010010011100000100010 ^
b100 N
b1000100101000000100011 P
b1000100101000000100011 F
1#
1.
#70
0#
0.
#75
b1 +"
b1 5"
0:"
1I"
b100 \
b100 x
b110 9"
1M"
1#"
b11111111111111111111111111111111 L"
b11111111111111111111111111111111 ""
0c
1a
b100010 ]
b101 "
b101 2
b101 D
b101 U
b101 {
b0 N
1Q
1G
b10000010000010000000001100100 P
b10000010000010000000001100100 F
b10000 K
b10000 C
b10000 )"
b10000 7"
b1000100101000000100011 J
b1000100101000000100011 B
b1000100101000000100011 V
b1000100101000000100011 ^
b100001 t
b100001 6
b100001 Y
b100001 $"
b100 p
b100 T
b110 r
b110 5
b110 X
b110 }
b110 '"
b110 4"
b110 O"
b110 S
b110 z
b101 q
b101 4
b101 W
b101 |
b101 &"
b101 3"
b101 R
b101 y
b1000010010011100000100010 w
1."
1=
b100000 0"
b100000 >
b101 -"
b101 <
b101 N"
1#
1.
#80
0#
0.
#85
b11111111111111111111111111111111 "
b11111111111111111111111111111111 2
b11111111111111111111111111111111 D
b11111111111111111111111111111111 U
b11111111111111111111111111111111 {
1<"
b10 +"
b10 5"
0:"
0I"
b111 \
b111 x
b1001 9"
0a
1b
b100011 ]
1M"
1#"
b1000 L"
b1000 ""
b100001 0"
b100001 >
b11111111111111111111111111111111 -"
b11111111111111111111111111111111 <
b11111111111111111111111111111111 N"
b100010 t
b100010 6
b100010 Y
b100010 $"
b111 p
b111 T
b1001 r
b1001 5
b1001 X
b1001 }
b1001 '"
b1001 4"
b1001 O"
b1001 S
b1001 z
b1000 q
b1000 4
b1000 W
b1000 |
b1000 &"
b1000 3"
b1000 R
b1000 y
b1000100101000000100011 w
0L
0M
b10100 K
b10100 C
b10100 )"
b10100 7"
b10000010000010000000001100100 J
b10000010000010000000001100100 B
b10000010000010000000001100100 V
b10000010000010000000001100100 ^
0O
0E
b1 N
0Q
0G
b10000110000100000100000 P
b10000110000100000100000 F
1#
1.
#90
0#
0.
#95
0*"
1C"
b11 +"
b11 5"
0:"
0<"
b1010 \
b1010 x
b10 9"
1M"
1#"
b10 L"
b10 ""
0k
1e
b100 _
0b
1d
b100100 ]
b1000 "
b1000 2
b1000 D
b1000 U
b1000 {
1L
1M
b100011 t
b100011 6
b100011 Y
b100011 $"
b1010 p
b1010 T
b10 r
b10 5
b10 X
b10 }
b10 '"
b10 4"
b10 O"
b10 S
b10 z
b1 q
b0 4
b0 W
b0 |
b0 &"
b0 3"
b1 R
b1 y
b10000010000010000000001100100 w
b100010 0"
b100010 >
b1000 -"
b1000 <
b1000 N"
1#
1.
#100
0#
0.
#105
b10 "
b10 2
b10 D
b10 U
b10 {
1S"
1&
1Y"
1,
0X"
0+
b0 +"
b0 5"
1:"
0C"
b1 \
b1 x
b1100100 9"
1M"
1#"
b1100110 L"
b1100110 ""
b100011 0"
b100011 >
b10 -"
b10 <
b10 N"
b1100100 u
b1100100 8"
b1100100 7
b1100100 Z
b1100100 ("
b1100100 6"
b0 t
b0 6
b0 Y
b0 $"
b100 v
b100 -
b100 8
b100 [
b100 %"
b100 R"
b0 p
b0 T
b1 r
b0 5
b0 X
b0 }
b0 '"
b0 4"
b0 O"
b1 S
b1 z
b10 q
b10 4
b10 W
b10 |
b10 &"
b10 3"
b10 R
b10 y
1O
1E
b10 N
b101001100010000000100001 P
b101001100010000000100001 F
1#
1.
#110
0#
0.
#115
1M"
1#"
b1100110 L"
b1100110 ""
b1100110 "
b1100110 2
b1100110 D
b1100110 U
b1100110 {
b11 N
b1000010010011100000100010 P
b1000010010011100000100010 F
b11000 K
b11000 C
b11000 )"
b11000 7"
b101001100010000000100001 J
b101001100010000000100001 B
b101001100010000000100001 V
b101001100010000000100001 ^
b10 5
b10 X
b10 }
b10 '"
b10 4"
b10 O"
b0 0"
b0 >
b100 1"
b100 ?
b1100110 -"
b1100110 <
b1100110 N"
1#
1.
#120
0#
0.
#125
1k
0e
b0 _
1c
0d
b100001 ]
1M"
1#"
b1100110 L"
b1100110 ""
b1100110 5
b1100110 X
b1100110 }
b1100110 '"
b1100110 4"
b1100110 O"
b101001100010000000100001 w
b11100 K
b11100 C
b11100 )"
b11100 7"
b1000010010011100000100010 J
b1000010010011100000100010 B
b1000010010011100000100010 V
b1000010010011100000100010 ^
b100 N
b1000100101000000100011 P
b1000100101000000100011 F
1#
1.
#130
0#
0.
#135
b110 9"
1X"
1+
1Y"
1,
0S"
0&
b1 +"
b1 5"
0:"
1I"
b100 \
b100 x
1M"
1#"
b11111111111111111111111111111111 L"
b11111111111111111111111111111111 ""
0c
1a
b100010 ]
b0 N
1Q
1G
b10000010000010000000001100100 P
b10000010000010000000001100100 F
b100000 K
b100000 C
b100000 )"
b100000 7"
b1000100101000000100011 J
b1000100101000000100011 B
b1000100101000000100011 V
b1000100101000000100011 ^
b0 u
b0 8"
b0 7
b0 Z
b0 ("
b0 6"
b100001 t
b100001 6
b100001 Y
b100001 $"
b0 v
b0 -
b0 8
b0 [
b0 %"
b0 R"
b100 p
b100 T
b110 r
b110 5
b110 X
b110 }
b110 '"
b110 4"
b110 O"
b110 S
b110 z
b101 q
b101 4
b101 W
b101 |
b101 &"
b101 3"
b101 R
b101 y
b1000010010011100000100010 w
1#
1.
#140
0#
0.
#145
b11111111111111111111111111111111 "
b11111111111111111111111111111111 2
b11111111111111111111111111111111 D
b11111111111111111111111111111111 U
b11111111111111111111111111111111 {
1<"
b10 +"
b10 5"
0:"
0I"
b111 \
b111 x
b1001 9"
0a
1b
b100011 ]
1M"
1#"
b1000 L"
b1000 ""
b100001 0"
b100001 >
b0 1"
b0 ?
b11111111111111111111111111111111 -"
b11111111111111111111111111111111 <
b11111111111111111111111111111111 N"
b100010 t
b100010 6
b100010 Y
b100010 $"
b111 p
b111 T
b1001 r
b1001 5
b1001 X
b1001 }
b1001 '"
b1001 4"
b1001 O"
b1001 S
b1001 z
b1000 q
b1000 4
b1000 W
b1000 |
b1000 &"
b1000 3"
b1000 R
b1000 y
b1000100101000000100011 w
0L
0M
b100100 K
b100100 C
b100100 )"
b100100 7"
b10000010000010000000001100100 J
b10000010000010000000001100100 B
b10000010000010000000001100100 V
b10000010000010000000001100100 ^
0O
0E
b1 N
0Q
0G
b10000110000100000100000 P
b10000110000100000100000 F
1#
1.
#150
0#
0.
#155
0*"
1C"
b11 +"
b11 5"
0:"
0<"
b1010 \
b1010 x
b10 9"
1M"
1#"
b1100110 L"
b1100110 ""
0k
1e
b100 _
0b
1d
b100100 ]
b1000 "
b1000 2
b1000 D
b1000 U
b1000 {
1L
1M
b100011 t
b100011 6
b100011 Y
b100011 $"
b1010 p
b1010 T
b10 r
b10 5
b10 X
b10 }
b10 '"
b10 4"
b10 O"
b10 S
b10 z
b1 q
b1100110 4
b1100110 W
b1100110 |
b1100110 &"
b1100110 3"
b1 R
b1 y
b10000010000010000000001100100 w
b100010 0"
b100010 >
b1000 -"
b1000 <
b1000 N"
1#
1.
