$date
	Sat Oct 11 16:00:15 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 6 ! ds_es_o_opcode [5:0] $end
$var wire 32 " fs_es_o_pc [31:0] $end
$var wire 32 # write_back_data [31:0] $end
$var reg 1 $ d_clk $end
$var reg 1 % d_i_ALUSrc $end
$var reg 1 & d_i_Branch $end
$var reg 1 ' d_i_MemRead $end
$var reg 1 ( d_i_MemWrite $end
$var reg 1 ) d_i_MemtoReg $end
$var reg 1 * d_i_RegDst $end
$var reg 1 + d_i_RegWrite $end
$var reg 1 , d_i_ce $end
$var reg 1 - d_rst $end
$scope module d $end
$var wire 1 . d_clk $end
$var wire 1 / d_i_ALUSrc $end
$var wire 1 0 d_i_Branch $end
$var wire 1 1 d_i_MemRead $end
$var wire 1 2 d_i_MemWrite $end
$var wire 1 3 d_i_MemtoReg $end
$var wire 1 4 d_i_RegDst $end
$var wire 1 5 d_i_RegWrite $end
$var wire 1 6 d_i_ce $end
$var wire 1 7 d_rst $end
$var wire 1 8 ds_es_o_ce $end
$var wire 32 9 ds_es_o_data_rs [31:0] $end
$var wire 32 : ds_es_o_data_rt [31:0] $end
$var wire 6 ; ds_es_o_funct [5:0] $end
$var wire 16 < ds_es_o_imm [15:0] $end
$var wire 6 = ds_es_o_opcode [5:0] $end
$var wire 1 > es_is_change_pc $end
$var wire 32 ? es_is_o_pc [31:0] $end
$var wire 32 @ es_load_data [31:0] $end
$var wire 32 A es_ms_alu_value [31:0] $end
$var wire 1 B es_ms_o_ce $end
$var wire 6 C es_o_funct [5:0] $end
$var wire 6 D es_o_opcode [5:0] $end
$var wire 1 E es_o_zero $end
$var wire 1 F fs_ds_o_ce $end
$var wire 32 G fs_ds_o_instr [31:0] $end
$var wire 32 H fs_es_o_pc [31:0] $end
$var wire 32 I write_back_data [31:0] $end
$scope module is $end
$var wire 1 . f_clk $end
$var wire 1 J f_i_ack $end
$var wire 1 6 f_i_ce $end
$var wire 1 > f_i_change_pc $end
$var wire 32 K f_i_instr [31:0] $end
$var wire 1 L f_i_last $end
$var wire 32 M f_i_pc [31:0] $end
$var wire 1 7 f_rst $end
$var reg 32 N cur_pc [31:0] $end
$var reg 1 O f_o_ce $end
$var reg 32 P f_o_instr [31:0] $end
$var reg 32 Q f_o_pc [31:0] $end
$var reg 1 R f_o_syn $end
$scope module t $end
$var wire 1 . t_clk $end
$var wire 1 S t_i_syn $end
$var wire 1 7 t_rst $end
$var integer 32 T counter [31:0] $end
$var reg 1 U t_o_ack $end
$var reg 32 V t_o_instr [31:0] $end
$var reg 1 W t_o_last $end
$upscope $end
$upscope $end
$scope module ds $end
$var wire 5 X d_o_addr_rs [4:0] $end
$var wire 5 Y d_o_addr_rt [4:0] $end
$var wire 1 . ds_clk $end
$var wire 5 Z ds_i_addr_rd [4:0] $end
$var wire 1 F ds_i_ce $end
$var wire 32 [ ds_i_data_rd [31:0] $end
$var wire 32 \ ds_i_instr [31:0] $end
$var wire 1 4 ds_i_reg_dst $end
$var wire 1 5 ds_i_reg_wr $end
$var wire 1 8 ds_o_ce $end
$var wire 32 ] ds_o_data_rs [31:0] $end
$var wire 32 ^ ds_o_data_rt [31:0] $end
$var wire 6 _ ds_o_funct [5:0] $end
$var wire 16 ` ds_o_imm [15:0] $end
$var wire 6 a ds_o_opcode [5:0] $end
$var wire 1 7 ds_rst $end
$var wire 5 b write_register [4:0] $end
$scope module d $end
$var wire 1 F d_i_ce $end
$var wire 6 c d_i_funct [5:0] $end
$var wire 32 d d_i_instr [31:0] $end
$var wire 6 e d_i_opcode [5:0] $end
$var wire 6 f funct [5:0] $end
$var wire 1 g funct_add $end
$var wire 1 h funct_and $end
$var wire 1 i funct_or $end
$var wire 1 j funct_sub $end
$var wire 1 k funct_xor $end
$var wire 16 l imm [15:0] $end
$var wire 1 m op_addi $end
$var wire 1 n op_addiu $end
$var wire 1 o op_andi $end
$var wire 1 p op_beq $end
$var wire 1 q op_bne $end
$var wire 1 r op_load $end
$var wire 1 s op_ori $end
$var wire 1 t op_rtype $end
$var wire 1 u op_slti $end
$var wire 1 v op_sltiu $end
$var wire 1 w op_store $end
$var wire 1 x op_xori $end
$var wire 6 y opcode [5:0] $end
$var wire 5 z rd [4:0] $end
$var wire 5 { rs [4:0] $end
$var wire 5 | rt [4:0] $end
$var reg 5 } d_o_addr_rd [4:0] $end
$var reg 5 ~ d_o_addr_rs [4:0] $end
$var reg 5 !" d_o_addr_rt [4:0] $end
$var reg 1 "" d_o_ce $end
$var reg 6 #" d_o_funct [5:0] $end
$var reg 16 $" d_o_imm [15:0] $end
$var reg 6 %" d_o_opcode [5:0] $end
$upscope $end
$scope module r $end
$var wire 5 &" r_addr_in [4:0] $end
$var wire 5 '" r_addr_out1 [4:0] $end
$var wire 5 (" r_addr_out2 [4:0] $end
$var wire 1 . r_clk $end
$var wire 32 )" r_data_in [31:0] $end
$var wire 32 *" r_data_out1 [31:0] $end
$var wire 32 +" r_data_out2 [31:0] $end
$var wire 1 7 r_rst $end
$var wire 1 5 r_wr_en $end
$var integer 32 ," i [31:0] $end
$upscope $end
$upscope $end
$scope module es $end
$var wire 5 -" alu_control [4:0] $end
$var wire 32 ." alu_pc [31:0] $end
$var wire 32 /" alu_value [31:0] $end
$var wire 1 0" change_pc $end
$var wire 6 1" es_i_alu_funct [5:0] $end
$var wire 6 2" es_i_alu_op [5:0] $end
$var wire 1 / es_i_alu_src $end
$var wire 1 0 es_i_branch $end
$var wire 1 8 es_i_ce $end
$var wire 32 3" es_i_data_rs [31:0] $end
$var wire 32 4" es_i_data_rt [31:0] $end
$var wire 16 5" es_i_imm [15:0] $end
$var wire 32 6" es_i_pc [31:0] $end
$var wire 32 7" es_o_alu_pc [31:0] $end
$var wire 1 > es_o_change_pc $end
$var wire 1 8" take_beq $end
$var wire 1 9" take_bne $end
$var wire 1 :" take_branch $end
$var wire 1 ;" temp_zero $end
$var reg 32 <" es_o_alu_value [31:0] $end
$var reg 1 =" es_o_ce $end
$var reg 6 >" es_o_funct [5:0] $end
$var reg 6 ?" es_o_opcode [5:0] $end
$var reg 1 @" es_o_zero $end
$scope module ac $end
$var wire 6 A" ac_i_funct [5:0] $end
$var wire 6 B" ac_i_opcode [5:0] $end
$var reg 5 C" ac_o_control [4:0] $end
$upscope $end
$scope module a $end
$var wire 1 / a_i_alu_src $end
$var wire 32 D" a_i_data_rs [31:0] $end
$var wire 32 E" a_i_data_rt [31:0] $end
$var wire 5 F" a_i_funct [4:0] $end
$var wire 16 G" a_i_imm [15:0] $end
$var wire 32 H" a_i_pc [31:0] $end
$var wire 32 I" a_imm [31:0] $end
$var wire 32 J" a_o_data_2 [31:0] $end
$var wire 1 K" funct_add $end
$var wire 1 L" funct_addu $end
$var wire 1 M" funct_and $end
$var wire 1 N" funct_beq $end
$var wire 1 O" funct_bne $end
$var wire 1 P" funct_eq $end
$var wire 1 Q" funct_ge $end
$var wire 1 R" funct_geu $end
$var wire 1 S" funct_neq $end
$var wire 1 T" funct_or $end
$var wire 1 U" funct_sll $end
$var wire 1 V" funct_slt $end
$var wire 1 W" funct_sltu $end
$var wire 1 X" funct_sra $end
$var wire 1 Y" funct_srl $end
$var wire 1 Z" funct_sub $end
$var wire 1 [" funct_xor $end
$var reg 1 \" a_o_change_pc $end
$var reg 32 ]" alu_pc [31:0] $end
$var reg 32 ^" alu_value [31:0] $end
$upscope $end
$upscope $end
$scope module m $end
$var wire 32 _" alu_value_addr [31:0] $end
$var wire 1 . m_clk $end
$var wire 1 B m_i_ce $end
$var wire 32 `" m_i_store_data [31:0] $end
$var wire 32 a" m_o_load_data [31:0] $end
$var wire 1 1 m_rd_en $end
$var wire 1 7 m_rst $end
$var wire 1 2 m_wr_en $end
$var integer 32 b" i [31:0] $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 c" counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 c"
b100000 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
1K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
0@"
b0 ?"
b0 >"
0="
b0 <"
1;"
0:"
09"
08"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
00"
b0 /"
b0 ."
b0 -"
b100000 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
0""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
0x
0w
0v
0u
1t
0s
0r
0q
0p
0o
0n
0m
b0 l
0k
0j
0i
0h
0g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
0W
bz V
0U
b0 T
0S
0R
b0 Q
b0 P
0O
b0 N
b0 M
0L
bz K
0J
b0 I
b0 H
b0 G
0F
0E
b0 D
b0 C
0B
b0 A
b0 @
b0 ?
0>
b0 =
b0 <
b0 ;
b0 :
b0 9
08
07
x6
x5
x4
x3
x2
x1
x0
x/
0.
0-
x,
x+
x*
x)
x(
x'
x&
x%
0$
b0 #
b0 "
b0 !
$end
#5
1$
1.
#10
b100000 b"
b100000 ,"
0$
0.
#15
1-
17
1$
1.
#20
0$
0.
#25
1R
1S
b100 Q
b100 "
b100 H
b100 6"
b100 H"
1,
16
1$
1.
#30
0$
0.
#35
1U
1J
b1 T
b1000111010000000000000010100 V
b1000111010000000000000010100 K
b1000 Q
b1000 "
b1000 H
b1000 6"
b1000 H"
1)
13
0(
02
1'
11
1%
1/
1+
15
0*
04
1$
1.
#40
0$
0.
#45
b11011 #
b11011 I
b11011 [
b11011 )"
0;"
b10100 J"
1="
1B
0@"
0E
b10 ?"
b10 D
b11011 <"
b11011 @
b11011 a"
b11011 A
b11011 _"
b1000 b
b1000 &"
b11011 ^"
b11011 /"
1""
18
b10100 $"
b10100 I"
b10100 <
b10100 `
b10100 5"
b10100 G"
b10 %"
b10 !
b10 =
b10 a
b10 2"
b10 B"
b1000 !"
b1000 :
b1000 ^
b1000 +"
b1000 4"
b1000 E"
b1000 `"
b1000 Y
b1000 ("
b111 ~
b111 9
b111 ]
b111 *"
b111 3"
b111 D"
b111 X
b111 '"
0t
1w
b10 e
b10100 c
b111 {
b1000 |
b10 y
b10100 f
b10100 l
1O
1F
b1000111010000000000000010100 P
b1000111010000000000000010100 G
b1000111010000000000000010100 \
b1000111010000000000000010100 d
b1100 Q
b1100 "
b1100 H
b1100 6"
b1100 H"
b10 T
b100111001100000000000010100 V
b100111001100000000000010100 K
1$
1.
#50
1="
1B
b10 ?"
b10 D
b11011 <"
b11011 @
b11011 a"
b11011 A
b11011 _"
b11011 ^"
b11011 /"
b11011 :
b11011 ^
b11011 +"
b11011 4"
b11011 E"
b11011 `"
0$
0.
#55
b110 b
b110 &"
1""
18
b10100 $"
b10100 I"
b10100 <
b10100 `
b10100 5"
b10100 G"
b1 %"
b1 !
b1 =
b1 a
b1 2"
b1 B"
b110 !"
b110 :
b110 ^
b110 +"
b110 4"
b110 E"
b110 `"
b110 Y
b110 ("
b111 ~
b111 9
b111 ]
b111 *"
b111 3"
b111 D"
b111 X
b111 '"
1="
1B
b1 ?"
b1 D
b11011 <"
b11011 @
b11011 a"
b11011 A
b11011 _"
1r
0w
b1 e
b110 |
b1 y
b11011 ^"
b11011 /"
b11 T
b1100001000100000000000000100 V
b1100001000100000000000000100 K
b100111001100000000000010100 P
b100111001100000000000010100 G
b100111001100000000000010100 \
b100111001100000000000010100 d
b10000 Q
b10000 "
b10000 H
b10000 6"
b10000 H"
1$
1.
#60
1="
1B
b1 ?"
b1 D
b11011 <"
b11011 @
b11011 a"
b11011 A
b11011 _"
b11011 ^"
b11011 /"
b11011 :
b11011 ^
b11011 +"
b11011 4"
b11011 E"
b11011 `"
0$
0.
#65
bx #
bx I
bx [
bx )"
b100 J"
b1111 C"
0K"
1N"
b1111 -"
b1111 F"
b10 b
b10 &"
1""
18
b100 $"
b100 I"
b100 <
b100 `
b100 5"
b100 G"
b11 %"
b11 !
b11 =
b11 a
b11 2"
b11 B"
b10 !"
b10 :
b10 ^
b10 +"
b10 4"
b10 E"
b10 `"
b10 Y
b10 ("
b1 ~
b1 9
b1 ]
b1 *"
b1 3"
b1 D"
b1 X
b1 '"
1="
1B
b11 ?"
b11 D
b11111111111111111111111111111111 <"
bx @
bx a"
b11111111111111111111111111111111 A
b11111111111111111111111111111111 _"
0r
1p
b11 e
b100 c
b1 {
b10 |
b11 y
b100 f
b100 l
b11111111111111111111111111111111 ^"
b11111111111111111111111111111111 /"
b1100001000100000000000000100 P
b1100001000100000000000000100 G
b1100001000100000000000000100 \
b1100001000100000000000000100 d
b10100 Q
b10100 "
b10100 H
b10100 6"
b10100 H"
b100 T
b1000100101000000100011 V
b1000100101000000100011 K
1$
1.
#70
x:"
x@"
xE
x8"
x;"
1="
1B
b11 ?"
b11 D
bx <"
bx @
bx a"
bx A
bx _"
bx ^"
bx /"
bx :
bx ^
bx +"
bx 4"
bx E"
bx `"
0$
0.
#75
0:"
b1 #
b1 I
b1 [
b1 )"
0;"
08"
b0 J"
1T"
b11 C"
0K"
0N"
b11 -"
b11 F"
b100011 >"
b100011 C
b100011 #"
b100011 ;
b100011 _
b100011 1"
b100011 A"
b1010 }
b1010 Z
1""
18
b0 $"
b0 I"
b0 <
b0 `
b0 5"
b0 G"
b0 %"
b0 !
b0 =
b0 a
b0 2"
b0 B"
b10 !"
bx :
bx ^
bx +"
bx 4"
bx E"
bx `"
b10 Y
b10 ("
b1 ~
b1 9
b1 ]
b1 *"
b1 3"
b1 D"
b1 X
b1 '"
1="
1B
b0 ?"
b0 D
0@"
0E
b1 <"
b1 @
b1 a"
b1 A
b1 _"
1t
0p
b0 e
1i
b100011 c
b1010 z
b0 y
b100011 f
b101000000100011 l
b1 ^"
b1 /"
b0 T
1W
1L
b10000010000010000000001100100 V
b10000010000010000000001100100 K
b1000100101000000100011 P
b1000100101000000100011 G
b1000100101000000100011 \
b1000100101000000100011 d
b11000 Q
b11000 "
b11000 H
b11000 6"
b11000 H"
1$
1.
#80
1="
1B
b100011 >"
b100011 C
b1 <"
b1 @
b1 a"
b1 A
b1 _"
b1 ^"
b1 /"
b1 :
b1 ^
b1 +"
b1 4"
b1 E"
b1 `"
0$
0.
#85
bx #
bx I
bx [
bx )"
b1100100 J"
b0 C"
1K"
0T"
b0 -"
b0 F"
b100 ?"
b100 D
b1 b
b1 &"
b1100100 $"
b1100100 I"
b1100100 <
b1100100 `
b1100100 5"
b1100100 G"
b100 %"
b100 !
b100 =
b100 a
b100 2"
b100 B"
1""
18
b0 #"
b0 ;
b0 _
b0 1"
b0 A"
b0 }
b0 Z
b1 !"
b1 :
b1 ^
b1 +"
b1 4"
b1 E"
b1 `"
b1 Y
b1 ("
b10 ~
b1 9
b1 ]
b1 *"
b1 3"
b1 D"
b10 X
b10 '"
1="
1B
b0 >"
b0 C
b1100101 <"
bx @
bx a"
b1100101 A
b1100101 _"
0t
1m
b100 e
0i
1k
b100100 c
b10 {
b1 |
b0 z
b100 y
b100100 f
b1100100 l
b1100101 ^"
b1100101 /"
b10000010000010000000001100100 P
b10000010000010000000001100100 G
b10000010000010000000001100100 \
b10000010000010000000001100100 d
0R
0S
b11100 Q
b11100 "
b11100 H
b11100 6"
b11100 H"
0U
0J
b1 T
0W
0L
b1000111010000000000000010100 V
b1000111010000000000000010100 K
1$
1.
#90
1="
1B
b100 ?"
b100 D
b1100101 <"
bx @
bx a"
b1100101 A
b1100101 _"
b1100101 ^"
b1100101 /"
bx :
bx ^
bx +"
bx 4"
bx E"
bx `"
0$
0.
#95
1;"
b0 #
b0 I
b0 [
b0 )"
b0 J"
b0 b
b0 &"
0="
0B
b0 ?"
b0 D
b0 <"
b0 @
b0 a"
b0 A
b0 _"
0""
08
b0 $"
b0 I"
b0 <
b0 `
b0 5"
b0 G"
b0 %"
b0 !
b0 =
b0 a
b0 2"
b0 B"
b0 !"
b0 :
b0 ^
b0 +"
b0 4"
b0 E"
b0 `"
b0 Y
b0 ("
b0 ~
b0 9
b0 ]
b0 *"
b0 3"
b0 D"
b0 X
b0 '"
b0 ^"
b0 /"
0O
0F
1R
1S
b100000 Q
b100000 "
b100000 H
b100000 6"
b100000 H"
1$
1.
#100
0$
0.
#105
b100100 Q
b100100 "
b100100 H
b100100 6"
b100100 H"
1U
1J
b10 T
b100111001100000000000010100 V
b100111001100000000000010100 K
1$
1.
#110
0$
0.
#115
b11011 #
b11011 I
b11011 [
b11011 )"
0;"
b10100 J"
1="
1B
0@"
0E
b1 ?"
b1 D
b11011 <"
b11011 @
b11011 a"
b11011 A
b11011 _"
b110 b
b110 &"
b11011 ^"
b11011 /"
1""
18
b10100 $"
b10100 I"
b10100 <
b10100 `
b10100 5"
b10100 G"
b1 %"
b1 !
b1 =
b1 a
b1 2"
b1 B"
b110 !"
b11011 :
b11011 ^
b11011 +"
b11011 4"
b11011 E"
b11011 `"
b110 Y
b110 ("
b111 ~
b111 9
b111 ]
b111 *"
b111 3"
b111 D"
b111 X
b111 '"
1r
0m
b1 e
0k
b10100 c
b111 {
b110 |
b1 y
b10100 f
b10100 l
b11 T
b1100001000100000000000000100 V
b1100001000100000000000000100 K
1O
1F
b100111001100000000000010100 P
b100111001100000000000010100 G
b100111001100000000000010100 \
b100111001100000000000010100 d
b101000 Q
b101000 "
b101000 H
b101000 6"
b101000 H"
1$
1.
