$date
	Wed Oct 08 00:48:20 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 6 ! ds_es_o_opcode [5:0] $end
$var wire 32 " fs_es_o_pc [31:0] $end
$var wire 32 # write_back_data [31:0] $end
$var reg 1 $ d_clk $end
$var reg 1 % d_i_ALUSrc $end
$var reg 1 & d_i_Branch $end
$var reg 1 ' d_i_MemRead $end
$var reg 1 ( d_i_MemWrite $end
$var reg 1 ) d_i_MemtoReg $end
$var reg 1 * d_i_RegDst $end
$var reg 1 + d_i_RegWrite $end
$var reg 1 , d_i_ce $end
$var reg 1 - d_rst $end
$scope module d $end
$var wire 1 . d_clk $end
$var wire 1 / d_i_ALUSrc $end
$var wire 1 0 d_i_Branch $end
$var wire 1 1 d_i_MemRead $end
$var wire 1 2 d_i_MemWrite $end
$var wire 1 3 d_i_MemtoReg $end
$var wire 1 4 d_i_RegDst $end
$var wire 1 5 d_i_RegWrite $end
$var wire 1 6 d_i_ce $end
$var wire 1 7 d_rst $end
$var wire 1 8 ds_es_o_ce $end
$var wire 32 9 ds_es_o_data_rs [31:0] $end
$var wire 32 : ds_es_o_data_rt [31:0] $end
$var wire 6 ; ds_es_o_funct [5:0] $end
$var wire 16 < ds_es_o_imm [15:0] $end
$var wire 6 = ds_es_o_opcode [5:0] $end
$var wire 1 > es_is_change_pc $end
$var wire 32 ? es_is_o_pc [31:0] $end
$var wire 32 @ es_load_data [31:0] $end
$var wire 32 A es_ms_alu_value [31:0] $end
$var wire 1 B es_ms_o_ce $end
$var wire 6 C es_o_funct [5:0] $end
$var wire 6 D es_o_opcode [5:0] $end
$var wire 1 E es_o_zero $end
$var wire 1 F fs_ds_o_ce $end
$var wire 32 G fs_ds_o_instr [31:0] $end
$var wire 32 H fs_es_o_pc [31:0] $end
$var wire 32 I write_back_data [31:0] $end
$scope module is $end
$var wire 1 . f_clk $end
$var wire 1 J f_i_ack $end
$var wire 1 6 f_i_ce $end
$var wire 1 > f_i_change_pc $end
$var wire 32 K f_i_instr [31:0] $end
$var wire 1 L f_i_last $end
$var wire 32 M f_i_pc [31:0] $end
$var wire 1 7 f_rst $end
$var wire 32 N temp_pc [31:0] $end
$var reg 32 O cur_pc [31:0] $end
$var reg 1 P f_o_ce $end
$var reg 32 Q f_o_instr [31:0] $end
$var reg 32 R f_o_pc [31:0] $end
$var reg 1 S f_o_syn $end
$scope module t $end
$var wire 1 . t_clk $end
$var wire 1 T t_i_syn $end
$var wire 1 7 t_rst $end
$var integer 32 U counter [31:0] $end
$var reg 1 V t_o_ack $end
$var reg 32 W t_o_instr [31:0] $end
$var reg 1 X t_o_last $end
$upscope $end
$upscope $end
$scope module ds $end
$var wire 5 Y d_o_addr_rs [4:0] $end
$var wire 5 Z d_o_addr_rt [4:0] $end
$var wire 1 . ds_clk $end
$var wire 5 [ ds_i_addr_rd [4:0] $end
$var wire 1 F ds_i_ce $end
$var wire 32 \ ds_i_data_rd [31:0] $end
$var wire 32 ] ds_i_instr [31:0] $end
$var wire 1 4 ds_i_reg_dst $end
$var wire 1 5 ds_i_reg_wr $end
$var wire 1 8 ds_o_ce $end
$var wire 32 ^ ds_o_data_rs [31:0] $end
$var wire 32 _ ds_o_data_rt [31:0] $end
$var wire 6 ` ds_o_funct [5:0] $end
$var wire 16 a ds_o_imm [15:0] $end
$var wire 6 b ds_o_opcode [5:0] $end
$var wire 1 7 ds_rst $end
$var wire 5 c write_register [4:0] $end
$scope module d $end
$var wire 1 . d_clk $end
$var wire 1 F d_i_ce $end
$var wire 6 d d_i_funct [5:0] $end
$var wire 32 e d_i_instr [31:0] $end
$var wire 6 f d_i_opcode [5:0] $end
$var wire 1 7 d_rst $end
$var wire 6 g funct [5:0] $end
$var wire 1 h funct_add $end
$var wire 1 i funct_and $end
$var wire 1 j funct_or $end
$var wire 1 k funct_sub $end
$var wire 1 l funct_xor $end
$var wire 16 m imm [15:0] $end
$var wire 1 n op_addi $end
$var wire 1 o op_addiu $end
$var wire 1 p op_andi $end
$var wire 1 q op_beq $end
$var wire 1 r op_bne $end
$var wire 1 s op_load $end
$var wire 1 t op_ori $end
$var wire 1 u op_rtype $end
$var wire 1 v op_slti $end
$var wire 1 w op_sltiu $end
$var wire 1 x op_store $end
$var wire 1 y op_xori $end
$var wire 6 z opcode [5:0] $end
$var wire 5 { rd [4:0] $end
$var wire 5 | rs [4:0] $end
$var wire 5 } rt [4:0] $end
$var reg 5 ~ d_o_addr_rd [4:0] $end
$var reg 5 !" d_o_addr_rs [4:0] $end
$var reg 5 "" d_o_addr_rt [4:0] $end
$var reg 1 #" d_o_ce $end
$var reg 6 $" d_o_funct [5:0] $end
$var reg 16 %" d_o_imm [15:0] $end
$var reg 6 &" d_o_opcode [5:0] $end
$upscope $end
$scope module r $end
$var wire 5 '" r_addr_in [4:0] $end
$var wire 5 (" r_addr_out1 [4:0] $end
$var wire 5 )" r_addr_out2 [4:0] $end
$var wire 1 . r_clk $end
$var wire 32 *" r_data_in [31:0] $end
$var wire 32 +" r_data_out1 [31:0] $end
$var wire 32 ," r_data_out2 [31:0] $end
$var wire 1 7 r_rst $end
$var wire 1 5 r_wr_en $end
$var integer 32 -" i [31:0] $end
$upscope $end
$upscope $end
$scope module es $end
$var wire 32 ." alu_pc [31:0] $end
$var wire 32 /" alu_value [31:0] $end
$var wire 1 0" change_pc $end
$var wire 1 1" done $end
$var wire 1 . es_clk $end
$var wire 6 2" es_i_alu_funct [5:0] $end
$var wire 6 3" es_i_alu_op [5:0] $end
$var wire 1 / es_i_alu_src $end
$var wire 1 0 es_i_branch $end
$var wire 1 8 es_i_ce $end
$var wire 32 4" es_i_data_rs [31:0] $end
$var wire 32 5" es_i_data_rt [31:0] $end
$var wire 16 6" es_i_imm [15:0] $end
$var wire 32 7" es_i_pc [31:0] $end
$var wire 1 7 es_rst $end
$var wire 1 8" temp_zero $end
$var reg 5 9" alu_control [4:0] $end
$var reg 32 :" es_o_alu_pc [31:0] $end
$var reg 32 ;" es_o_alu_value [31:0] $end
$var reg 1 <" es_o_ce $end
$var reg 1 =" es_o_change_pc $end
$var reg 6 >" es_o_funct [5:0] $end
$var reg 6 ?" es_o_opcode [5:0] $end
$var reg 1 @" es_o_zero $end
$scope module a $end
$var wire 1 / a_i_alu_src $end
$var wire 32 A" a_i_data_rs [31:0] $end
$var wire 32 B" a_i_data_rt [31:0] $end
$var wire 5 C" a_i_funct [4:0] $end
$var wire 16 D" a_i_imm [15:0] $end
$var wire 32 E" a_i_pc [31:0] $end
$var wire 32 F" a_imm [31:0] $end
$var wire 32 G" a_o_data_2 [31:0] $end
$var wire 1 H" funct_add $end
$var wire 1 I" funct_addu $end
$var wire 1 J" funct_and $end
$var wire 1 K" funct_beq $end
$var wire 1 L" funct_bne $end
$var wire 1 M" funct_eq $end
$var wire 1 N" funct_ge $end
$var wire 1 O" funct_geu $end
$var wire 1 P" funct_neq $end
$var wire 1 Q" funct_or $end
$var wire 1 R" funct_sll $end
$var wire 1 S" funct_slt $end
$var wire 1 T" funct_sltu $end
$var wire 1 U" funct_sra $end
$var wire 1 V" funct_srl $end
$var wire 1 W" funct_sub $end
$var wire 1 X" funct_xor $end
$var reg 1 Y" a_o_change_pc $end
$var reg 32 Z" alu_pc [31:0] $end
$var reg 32 [" alu_value [31:0] $end
$var reg 1 \" done $end
$upscope $end
$upscope $end
$scope module m $end
$var wire 32 ]" alu_value_addr [31:0] $end
$var wire 1 . m_clk $end
$var wire 1 B m_i_ce $end
$var wire 32 ^" m_i_store_data [31:0] $end
$var wire 1 1 m_rd_en $end
$var wire 1 7 m_rst $end
$var wire 1 2 m_wr_en $end
$var integer 32 _" i [31:0] $end
$var reg 32 `" m_o_load_data [31:0] $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 a" counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 a"
b0 `"
b100000 _"
b0 ^"
b0 ]"
1\"
b0 ["
b0 Z"
xY"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
1H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
0@"
b0 ?"
b0 >"
0="
0<"
b0 ;"
b0 :"
b0 9"
18"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
11"
x0"
b0 /"
b0 ."
b100000 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
0#"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
0y
0x
0w
0v
1u
0t
0s
0r
0q
0p
0o
0n
b0 m
0l
0k
0j
0i
0h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
0X
b0 W
0V
b0 U
0T
0S
b0 R
b0 Q
0P
b0 O
b100 N
b0 M
0L
b0 K
0J
b0 I
b0 H
b0 G
0F
0E
b0 D
b0 C
0B
b0 A
b0 @
b0 ?
0>
b0 =
b0 <
b0 ;
b0 :
b0 9
08
07
x6
x5
x4
x3
x2
x1
x0
x/
0.
0-
x,
x+
x*
x)
x(
x'
x&
x%
0$
b0 #
b0 "
b0 !
$end
#5
b100000 _"
b100000 -"
1$
1.
#10
0$
0.
#15
1-
17
1$
1.
#20
0$
0.
#25
1S
1T
1,
16
1$
1.
#30
0$
0.
#35
1V
1J
b1 U
b10000110000100000100000 W
b10000110000100000100000 K
0)
03
0(
02
0'
01
0%
0/
1+
15
1*
14
1$
1.
#40
0$
0.
#45
b1000 N
1h
b100000 d
b10 |
b11 }
b1 {
b100000 g
b100000100000 m
1P
1F
b100 O
b10000110000100000100000 Q
b10000110000100000100000 G
b10000110000100000100000 ]
b10000110000100000100000 e
b10 U
b101001100010000000100001 W
b101001100010000000100001 K
1$
1.
#50
0$
0.
#55
b1100 N
08"
0h
1k
b100001 d
b101 |
b110 }
b100 {
b100001 g
b10000000100001 m
b1 c
b1 '"
b11 G"
b101 ["
b101 /"
1\"
11"
b11 U
b1000010010011100000100010 W
b1000010010011100000100010 K
b1000 O
b100 R
b100 "
b100 H
b100 7"
b100 E"
b101001100010000000100001 Q
b101001100010000000100001 G
b101001100010000000100001 ]
b101001100010000000100001 e
1#"
18
b100000 $"
b100000 ;
b100000 `
b100000 2"
b1 ~
b1 [
b11 ""
b11 :
b11 _
b11 ,"
b11 5"
b11 B"
b11 ^"
b11 Z
b11 )"
b10 !"
b10 9
b10 ^
b10 +"
b10 4"
b10 A"
b10 Y
b10 ("
1$
1.
#60
0$
0.
#65
b10000 N
b101 #
b101 I
b101 \
b101 *"
b1 9"
b1 C"
0H"
1W"
b100 c
b100 '"
b110 G"
1\"
11"
b11111111111111111111111111111111 ["
b11111111111111111111111111111111 /"
0k
1i
b100010 d
b1000 |
b1001 }
b111 {
b100010 g
b11100000100010 m
1<"
1B
b100000 >"
b100000 C
b101 ;"
b101 A
b101 ]"
b100001 $"
b100001 ;
b100001 `
b100001 2"
b100 ~
b100 [
b110 ""
b110 :
b110 _
b110 ,"
b110 5"
b110 B"
b110 ^"
b110 Z
b110 )"
b101 !"
b101 9
b101 ^
b101 +"
b101 4"
b101 A"
b101 Y
b101 ("
b1100 O
b1000 R
b1000 "
b1000 H
b1000 7"
b1000 E"
b1000010010011100000100010 Q
b1000010010011100000100010 G
b1000010010011100000100010 ]
b1000010010011100000100010 e
b100 U
b1000100101000000100011 W
b1000100101000000100011 K
1$
1.
#70
0$
0.
#75
b10100 N
0i
1j
b100011 d
b1 |
b10 }
b1010 {
b100011 g
b101000000100011 m
1J"
b10 9"
b10 C"
0H"
0W"
b111 c
b111 '"
b1001 G"
1\"
11"
b1000 ["
b1000 /"
b11111111111111111111111111111111 #
b11111111111111111111111111111111 I
b11111111111111111111111111111111 \
b11111111111111111111111111111111 *"
b101 U
b10000010000010000000001100100 W
b10000010000010000000001100100 K
b10000 O
b1100 R
b1100 "
b1100 H
b1100 7"
b1100 E"
b1000100101000000100011 Q
b1000100101000000100011 G
b1000100101000000100011 ]
b1000100101000000100011 e
b100010 $"
b100010 ;
b100010 `
b100010 2"
b111 ~
b111 [
b1001 ""
b1001 :
b1001 _
b1001 ,"
b1001 5"
b1001 B"
b1001 ^"
b1001 Z
b1001 )"
b1000 !"
b1000 9
b1000 ^
b1000 +"
b1000 4"
b1000 A"
b1000 Y
b1000 ("
b100001 >"
b100001 C
b11111111111111111111111111111111 ;"
b11111111111111111111111111111111 A
b11111111111111111111111111111111 ]"
1$
1.
#80
0$
0.
#85
b11000 N
08"
b1000 #
b1000 I
b1000 \
b1000 *"
1Q"
b11 9"
b11 C"
0H"
0J"
b1010 c
b1010 '"
b10 G"
1\"
11"
b10 ["
b10 /"
0u
1n
b100 f
0j
1l
b100100 d
b10 |
b1 }
b0 {
b100 z
b100100 g
b1100100 m
b100010 >"
b100010 C
b1000 ;"
b1000 A
b1000 ]"
b100011 $"
b100011 ;
b100011 `
b100011 2"
b1010 ~
b1010 [
b10 ""
b10 :
b10 _
b10 ,"
b10 5"
b10 B"
b10 ^"
b10 Z
b10 )"
b1 !"
b0 9
b0 ^
b0 +"
b0 4"
b0 A"
b1 Y
b1 ("
b10100 O
b10000 R
b10000 "
b10000 H
b10000 7"
b10000 E"
b10000010000010000000001100100 Q
b10000010000010000000001100100 G
b10000010000010000000001100100 ]
b10000010000010000000001100100 e
b110 U
b1101011010110000000000010000 W
b1101011010110000000000010000 K
1$
1.
#90
0$
0.
#95
b11100 N
1q
0n
b11 f
0l
b10000 d
b1011 |
b1011 }
b11 z
b10000 g
b10000 m
b0 9"
b0 C"
1H"
0Q"
b0 c
b0 '"
b0 G"
1\"
11"
b10 ["
b10 /"
b10 #
b10 I
b10 \
b10 *"
b0 U
1X
1L
b100010010110000000000010000 W
b100010010110000000000010000 K
b11000 O
b10100 R
b10100 "
b10100 H
b10100 7"
b10100 E"
b1101011010110000000000010000 Q
b1101011010110000000000010000 G
b1101011010110000000000010000 ]
b1101011010110000000000010000 e
b1100100 %"
b1100100 F"
b1100100 <
b1100100 a
b1100100 6"
b1100100 D"
b0 $"
b0 ;
b0 `
b0 2"
b100 &"
b100 !
b100 =
b100 b
b100 3"
b0 ~
b0 [
b1 ""
b0 :
b0 _
b0 ,"
b0 5"
b0 B"
b0 ^"
b1 Z
b1 )"
b10 !"
b10 9
b10 ^
b10 +"
b10 4"
b10 A"
b10 Y
b10 ("
b100011 >"
b100011 C
b10 ;"
b10 A
b10 ]"
1$
1.
#100
0$
0.
#105
18"
1Y"
10"
b1011000 Z"
b1011000 ."
b100000 N
b1111 9"
b1111 C"
0H"
1K"
b1011 G"
1\"
11"
b0 ["
b0 /"
1s
0q
b1 f
b10 |
b1 z
b0 >"
b0 C
b100 ?"
b100 D
b10000 %"
b10000 F"
b10000 <
b10000 a
b10000 6"
b10000 D"
b11 &"
b11 !
b11 =
b11 b
b11 3"
b1011 ""
b1011 :
b1011 _
b1011 ,"
b1011 5"
b1011 B"
b1011 ^"
b1011 Z
b1011 )"
b1011 !"
b1011 9
b1011 ^
b1011 +"
b1011 4"
b1011 A"
b1011 Y
b1011 ("
b11100 O
b11000 R
b11000 "
b11000 H
b11000 7"
b11000 E"
b100010010110000000000010000 Q
b100010010110000000000010000 G
b100010010110000000000010000 ]
b100010010110000000000010000 e
0S
0T
0V
0J
b1 U
0X
0L
b10000110000100000100000 W
b10000110000100000100000 K
1$
1.
