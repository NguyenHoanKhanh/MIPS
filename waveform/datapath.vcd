$date
	Tue Oct 07 18:31:24 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 6 ! ds_es_o_opcode [5:0] $end
$var wire 32 " fs_es_o_pc [31:0] $end
$var wire 32 # write_back_data [31:0] $end
$var reg 1 $ d_clk $end
$var reg 1 % d_i_ALUSrc $end
$var reg 1 & d_i_Branch $end
$var reg 1 ' d_i_MemRead $end
$var reg 1 ( d_i_MemWrite $end
$var reg 1 ) d_i_MemtoReg $end
$var reg 1 * d_i_RegDst $end
$var reg 1 + d_i_RegWrite $end
$var reg 1 , d_i_ce $end
$var reg 1 - d_rst $end
$scope module d $end
$var wire 1 . d_clk $end
$var wire 1 / d_i_ALUSrc $end
$var wire 1 0 d_i_Branch $end
$var wire 1 1 d_i_MemRead $end
$var wire 1 2 d_i_MemWrite $end
$var wire 1 3 d_i_MemtoReg $end
$var wire 1 4 d_i_RegDst $end
$var wire 1 5 d_i_RegWrite $end
$var wire 1 6 d_i_ce $end
$var wire 1 7 d_rst $end
$var wire 1 8 ds_es_o_ce $end
$var wire 32 9 ds_es_o_data_rs [31:0] $end
$var wire 32 : ds_es_o_data_rt [31:0] $end
$var wire 6 ; ds_es_o_funct [5:0] $end
$var wire 16 < ds_es_o_imm [15:0] $end
$var wire 6 = ds_es_o_opcode [5:0] $end
$var wire 1 > es_is_change_pc $end
$var wire 32 ? es_is_o_pc [31:0] $end
$var wire 32 @ es_load_data [31:0] $end
$var wire 32 A es_ms_alu_value [31:0] $end
$var wire 1 B es_ms_o_ce $end
$var wire 6 C es_o_funct [5:0] $end
$var wire 6 D es_o_opcode [5:0] $end
$var wire 1 E es_o_zero $end
$var wire 1 F fs_ds_o_ce $end
$var wire 32 G fs_ds_o_instr [31:0] $end
$var wire 32 H fs_es_o_pc [31:0] $end
$var wire 32 I write_back_data [31:0] $end
$scope module is $end
$var wire 1 . f_clk $end
$var wire 1 J f_i_ack $end
$var wire 1 6 f_i_ce $end
$var wire 1 > f_i_change_pc $end
$var wire 32 K f_i_instr [31:0] $end
$var wire 1 L f_i_last $end
$var wire 32 M f_i_pc [31:0] $end
$var wire 1 7 f_rst $end
$var reg 1 N f_o_ce $end
$var reg 32 O f_o_instr [31:0] $end
$var reg 32 P f_o_pc [31:0] $end
$var reg 1 Q f_o_syn $end
$scope module t $end
$var wire 1 . t_clk $end
$var wire 1 R t_i_syn $end
$var wire 1 7 t_rst $end
$var integer 32 S counter [31:0] $end
$var reg 1 T t_o_ack $end
$var reg 32 U t_o_instr [31:0] $end
$var reg 1 V t_o_last $end
$upscope $end
$upscope $end
$scope module ds $end
$var wire 5 W d_o_addr_rs [4:0] $end
$var wire 5 X d_o_addr_rt [4:0] $end
$var wire 1 . ds_clk $end
$var wire 5 Y ds_i_addr_rd [4:0] $end
$var wire 1 F ds_i_ce $end
$var wire 32 Z ds_i_data_rd [31:0] $end
$var wire 32 [ ds_i_instr [31:0] $end
$var wire 1 4 ds_i_reg_dst $end
$var wire 1 5 ds_i_reg_wr $end
$var wire 1 8 ds_o_ce $end
$var wire 32 \ ds_o_data_rs [31:0] $end
$var wire 32 ] ds_o_data_rt [31:0] $end
$var wire 6 ^ ds_o_funct [5:0] $end
$var wire 16 _ ds_o_imm [15:0] $end
$var wire 6 ` ds_o_opcode [5:0] $end
$var wire 1 7 ds_rst $end
$var wire 5 a write_register [4:0] $end
$scope module d $end
$var wire 1 . d_clk $end
$var wire 1 F d_i_ce $end
$var wire 6 b d_i_funct [5:0] $end
$var wire 32 c d_i_instr [31:0] $end
$var wire 6 d d_i_opcode [5:0] $end
$var wire 1 7 d_rst $end
$var wire 1 e funct_add $end
$var wire 1 f funct_and $end
$var wire 1 g funct_or $end
$var wire 1 h funct_sub $end
$var wire 1 i funct_xor $end
$var wire 1 j op_addi $end
$var wire 1 k op_addiu $end
$var wire 1 l op_andi $end
$var wire 1 m op_beq $end
$var wire 1 n op_bne $end
$var wire 1 o op_load $end
$var wire 1 p op_ori $end
$var wire 1 q op_rtype $end
$var wire 1 r op_slti $end
$var wire 1 s op_sltiu $end
$var wire 1 t op_store $end
$var wire 1 u op_xori $end
$var reg 5 v d_o_addr_rd [4:0] $end
$var reg 5 w d_o_addr_rs [4:0] $end
$var reg 5 x d_o_addr_rt [4:0] $end
$var reg 1 y d_o_ce $end
$var reg 6 z d_o_funct [5:0] $end
$var reg 16 { d_o_imm [15:0] $end
$var reg 6 | d_o_opcode [5:0] $end
$var reg 32 } temp_instr [31:0] $end
$upscope $end
$scope module r $end
$var wire 5 ~ r_addr_in [4:0] $end
$var wire 5 !" r_addr_out1 [4:0] $end
$var wire 5 "" r_addr_out2 [4:0] $end
$var wire 1 . r_clk $end
$var wire 32 #" r_data_in [31:0] $end
$var wire 32 $" r_data_out1 [31:0] $end
$var wire 32 %" r_data_out2 [31:0] $end
$var wire 1 7 r_rst $end
$var wire 1 5 r_wr_en $end
$var integer 32 &" i [31:0] $end
$upscope $end
$upscope $end
$scope module es $end
$var wire 32 '" alu_pc [31:0] $end
$var wire 32 (" alu_value [31:0] $end
$var wire 1 )" done $end
$var wire 1 . es_clk $end
$var wire 6 *" es_i_alu_funct [5:0] $end
$var wire 6 +" es_i_alu_op [5:0] $end
$var wire 1 / es_i_alu_src $end
$var wire 1 0 es_i_branch $end
$var wire 1 8 es_i_ce $end
$var wire 32 ," es_i_data_rs [31:0] $end
$var wire 32 -" es_i_data_rt [31:0] $end
$var wire 16 ." es_i_imm [15:0] $end
$var wire 32 /" es_i_pc [31:0] $end
$var wire 1 7 es_rst $end
$var wire 1 0" temp_zero $end
$var reg 5 1" alu_control [4:0] $end
$var reg 32 2" es_o_alu_pc [31:0] $end
$var reg 32 3" es_o_alu_value [31:0] $end
$var reg 1 4" es_o_ce $end
$var reg 1 5" es_o_change_pc $end
$var reg 6 6" es_o_funct [5:0] $end
$var reg 6 7" es_o_opcode [5:0] $end
$var reg 1 8" es_o_zero $end
$scope module a $end
$var wire 1 / a_i_alu_src $end
$var wire 32 9" a_i_data_rs [31:0] $end
$var wire 32 :" a_i_data_rt [31:0] $end
$var wire 5 ;" a_i_funct [4:0] $end
$var wire 16 <" a_i_imm [15:0] $end
$var wire 32 =" a_i_pc [31:0] $end
$var wire 32 >" a_imm [31:0] $end
$var wire 32 ?" a_o_data_2 [31:0] $end
$var wire 1 @" funct_add $end
$var wire 1 A" funct_addu $end
$var wire 1 B" funct_and $end
$var wire 1 C" funct_beq $end
$var wire 1 D" funct_bne $end
$var wire 1 E" funct_eq $end
$var wire 1 F" funct_ge $end
$var wire 1 G" funct_geu $end
$var wire 1 H" funct_neq $end
$var wire 1 I" funct_or $end
$var wire 1 J" funct_sll $end
$var wire 1 K" funct_slt $end
$var wire 1 L" funct_sltu $end
$var wire 1 M" funct_sra $end
$var wire 1 N" funct_srl $end
$var wire 1 O" funct_sub $end
$var wire 1 P" funct_xor $end
$var reg 32 Q" alu_pc [31:0] $end
$var reg 32 R" alu_value [31:0] $end
$var reg 1 S" done $end
$upscope $end
$upscope $end
$scope module m $end
$var wire 32 T" alu_value_addr [31:0] $end
$var wire 1 . m_clk $end
$var wire 1 B m_i_ce $end
$var wire 32 U" m_i_store_data [31:0] $end
$var wire 1 1 m_rd_en $end
$var wire 1 7 m_rst $end
$var wire 1 2 m_wr_en $end
$var integer 32 V" i [31:0] $end
$var reg 32 W" m_o_load_data [31:0] $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 X" counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 X"
b0 W"
b100000 V"
b0 U"
b0 T"
1S"
b0 R"
b0 Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
1@"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
08"
b0 7"
b0 6"
05"
04"
b0 3"
b0 2"
b0 1"
10"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
1)"
b0 ("
b0 '"
b100000 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
bx }
b0 |
b0 {
b0 z
0y
b0 x
b0 w
b0 v
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
bx d
b0 c
bx b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
0V
b0 U
0T
b0 S
0R
0Q
b0 P
b0 O
0N
b0 M
0L
b0 K
0J
b0 I
b0 H
b0 G
0F
0E
b0 D
b0 C
0B
b0 A
b0 @
b0 ?
0>
b0 =
b0 <
b0 ;
b0 :
b0 9
08
07
x6
x5
x4
x3
x2
x1
x0
x/
0.
0-
x,
x+
x*
x)
x(
x'
x&
x%
0$
b0 #
b0 "
b0 !
$end
#5
b100000 V"
b100000 &"
1$
1.
#10
0$
0.
#15
1-
17
1$
1.
#20
0$
0.
#25
1Q
1R
1,
16
1$
1.
#30
0$
0.
#35
1T
1J
b1 S
b10000110000100000100000 U
b10000110000100000100000 K
0)
03
0(
02
0'
01
0%
0/
1+
15
1*
14
1$
1.
#40
0$
0.
#45
1S"
1)"
1N
1F
b100 P
b100 "
b100 H
b100 /"
b100 ="
b10000110000100000100000 O
b10000110000100000100000 G
b10000110000100000100000 [
b10000110000100000100000 c
b10 S
b101001100010000000100001 U
b101001100010000000100001 K
1$
1.
#50
0$
0.
#55
1S"
1)"
1q
0o
0t
0m
0n
0j
0k
0r
0s
0l
0p
0u
b0 d
1e
0h
0f
0g
0i
b100000 b
b11 S
b1000010010011100000100010 U
b1000010010011100000100010 K
b1000 P
b1000 "
b1000 H
b1000 /"
b1000 ="
b101001100010000000100001 O
b101001100010000000100001 G
b101001100010000000100001 [
b101001100010000000100001 c
b10000110000100000100000 }
1$
1.
#60
0$
0.
#65
00"
b1 a
b1 ~
b11 ?"
0e
1h
b100001 b
b101 R"
b101 ("
1S"
1)"
1y
18
b100000 z
b100000 ;
b100000 ^
b100000 *"
b1 v
b1 Y
b11 x
b11 :
b11 ]
b11 %"
b11 -"
b11 :"
b11 U"
b11 X
b11 ""
b10 w
b10 9
b10 \
b10 $"
b10 ,"
b10 9"
b10 W
b10 !"
b101001100010000000100001 }
b1100 P
b1100 "
b1100 H
b1100 /"
b1100 ="
b1000010010011100000100010 O
b1000010010011100000100010 G
b1000010010011100000100010 [
b1000010010011100000100010 c
b100 S
b1000100101000000100011 U
b1000100101000000100011 K
1$
1.
#70
0$
0.
#75
b100 a
b100 ~
b110 ?"
1S"
1)"
b1011 R"
b1011 ("
0h
1f
b100010 b
b101 #
b101 I
b101 Z
b101 #"
b0 S
1V
1L
b10000010000010000000001100100 U
b10000010000010000000001100100 K
b10000 P
b10000 "
b10000 H
b10000 /"
b10000 ="
b1000100101000000100011 O
b1000100101000000100011 G
b1000100101000000100011 [
b1000100101000000100011 c
b100001 z
b100001 ;
b100001 ^
b100001 *"
b100 v
b100 Y
b110 x
b110 :
b110 ]
b110 %"
b110 -"
b110 :"
b110 U"
b110 X
b110 ""
b101 w
b101 9
b101 \
b101 $"
b101 ,"
b101 9"
b101 W
b101 !"
b1000010010011100000100010 }
14"
1B
b100000 6"
b100000 C
b101 3"
b101 A
b101 T"
1$
1.
#80
0$
0.
#85
b1011 #
b1011 I
b1011 Z
b1011 #"
b111 a
b111 ~
b1001 ?"
0f
1g
b100011 b
1S"
1)"
b11111111111111111111111111111111 R"
b11111111111111111111111111111111 ("
b100001 6"
b100001 C
b1011 3"
b1011 A
b1011 T"
b1 1"
b1 ;"
0@"
1O"
b100010 z
b100010 ;
b100010 ^
b100010 *"
b111 v
b111 Y
b1001 x
b1001 :
b1001 ]
b1001 %"
b1001 -"
b1001 :"
b1001 U"
b1001 X
b1001 ""
b1000 w
b1000 9
b1000 \
b1000 $"
b1000 ,"
b1000 9"
b1000 W
b1000 !"
b1000100101000000100011 }
0Q
0R
b10100 P
b10100 "
b10100 H
b10100 /"
b10100 ="
b10000010000010000000001100100 O
b10000010000010000000001100100 G
b10000010000010000000001100100 [
b10000010000010000000001100100 c
0T
0J
b1 S
0V
0L
b10000110000100000100000 U
b10000110000100000100000 K
1$
1.
#90
0$
0.
#95
10"
b1010 a
b1010 ~
b10 ?"
0q
1j
b100 d
0g
1i
b100100 b
1S"
1)"
b0 R"
b0 ("
b11111111111111111111111111111111 #
b11111111111111111111111111111111 I
b11111111111111111111111111111111 Z
b11111111111111111111111111111111 #"
1Q
1R
b100011 z
b100011 ;
b100011 ^
b100011 *"
b1010 v
b1010 Y
b10 x
b10 :
b10 ]
b10 %"
b10 -"
b10 :"
b10 U"
b10 X
b10 ""
b1 w
b0 9
b0 \
b0 $"
b0 ,"
b0 9"
b1 W
b1 !"
b10000010000010000000001100100 }
1B"
b10 1"
b10 ;"
0@"
0O"
b100010 6"
b100010 C
b11111111111111111111111111111111 3"
b11111111111111111111111111111111 A
b11111111111111111111111111111111 T"
1$
1.
#100
0$
0.
#105
00"
b0 #
b0 I
b0 Z
b0 #"
b0 a
b0 ~
b0 ?"
b10 R"
b10 ("
1S"
1)"
18"
1E
b100011 6"
b100011 C
b0 3"
b0 A
b0 T"
1I"
b11 1"
b11 ;"
0@"
0B"
b1100100 {
b1100100 >"
b1100100 <
b1100100 _
b1100100 ."
b1100100 <"
b0 z
b0 ;
b0 ^
b0 *"
b100 |
b100 !
b100 =
b100 `
b100 +"
b0 v
b0 Y
b1 x
b0 :
b0 ]
b0 %"
b0 -"
b0 :"
b0 U"
b1 X
b1 ""
b10 w
b10 9
b10 \
b10 $"
b10 ,"
b10 9"
b10 W
b10 !"
1T
1J
b10 S
b101001100010000000100001 U
b101001100010000000100001 K
1$
1.
